package com.walshcorp.projecteuler;

import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;

/**
 * Triangle, pentagonal, and hexagonal numbers are generated by the following
 * formulae:<br />
 * <br />
 * Triangle |Tn=n(n+1)/2| 1, 3, 6, 10, 15, ...<br />
 * Pentagonal |Pn=n(3n-1)/2| 1, 5, 12, 22, 35, ...<br />
 * Hexagonal |Hn=n(2n-1)| 1, 6, 15, 28, 45, ...<br />
 * <br />
 * It can be verified that T285 = P165 = H143 = 40755.<br />
 * <br />
 * Find the next triangle number that is also pentagonal and hexagonal.
 * 
 * @author martin
 * 
 */
public class Problem45_TriangularPentagonalAndHexagonal implements
		ProblemInterface {
	List<Double> pentagonalNumbers = new ArrayList<Double>();
	List<Double> hexagonalNumbers = new ArrayList<Double>();

	@Override
	public void solve() {
		double number = 0;

		int tn = 286;
		int pn = 166;
		int hn = 144;

		pentagonalNumber(pn++);
		hexagonalNumber(hn++);

		boolean numberFound = false;

		outer: while (!numberFound) {
			double triNum = triangularNumber(tn++);

			while (pentagonalNumbers.get(pentagonalNumbers.size() - 1) <= triNum) {
				pentagonalNumber(pn++);
				if (pentagonalNumbers.get(pentagonalNumbers.size() - 1) == triNum) {
					while (hexagonalNumbers.get(hexagonalNumbers.size() - 1) <= triNum) {
						hexagonalNumber(hn++);
						if (hexagonalNumbers.get(hexagonalNumbers.size() - 1) == triNum) {
							numberFound = true;
							number = triNum;
							break outer;
						}
					}
					hn--;
				}
			}
			pn--;
		}

		NumberFormat nf = NumberFormat.getInstance();
		nf.setGroupingUsed(false);
		System.out.println("Problem 45: " + nf.format(number));
	}

	/**
	 * n(n + 1)/2
	 * 
	 * @param n
	 * @return
	 */
	private double triangularNumber(double n) {
		return n * (n + 1) / 2;
	}

	/**
	 * n(3n - 1)/2
	 * 
	 * @param index
	 * @return
	 */
	private void pentagonalNumber(double n) {
		pentagonalNumbers.add(n * (3 * n - 1) / 2);
	}

	/**
	 * n(2n - 1)
	 * 
	 * @param n
	 * @return
	 */
	private void hexagonalNumber(double n) {
		hexagonalNumbers.add(n * (2 * n - 1));
	}
}
