package com.walshcorp.projecteuler;

import java.util.HashMap;
import java.util.Map;

/**
 * Pentagonal numbers are generated by the formula, Pn=n(3n - 1)/2. The first
 * ten pentagonal numbers are:<br />
 * <br />
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...<br />
 * <br />
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
 * 70 22 = 48, is not pentagonal.<br />
 * <br />
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
 * difference are pentagonal and D = |Pk - Pj| is minimised; what is the value
 * of D?
 * 
 * @author martin
 * 
 */
public class Problem44_PentagonNumbers implements ProblemInterface {
	Map<Integer, Integer> pentagonalNumbers = new HashMap<Integer, Integer>();

	@Override
	public void solve() {
		// Limit:
		// pentagonal number is proportional to n^2.
		// If two pentagonal numbers are to be added and subtracted
		boolean condition = false;
		int d = 0;
		int n = 2;

		while (!condition) {
			int pn = pentagonalNumber(n);
			for (int i = 1; i < n; i++) {
				int pn1 = pentagonalNumber(i);
				if (isPentagonalNumber(pn + pn1)
						&& isPentagonalNumber(pn - pn1)) {
					d = pn - pn1;
					condition = true;
				}
			}
			n++;
		}
		System.out.println("Problem 44: " + d);
	}

	/**
	 * n(3n - 1)/2
	 * 
	 * @param index
	 * @return
	 */
	private int pentagonalNumber(int n) {
		if (!pentagonalNumbers.containsKey(n)) {
			pentagonalNumbers.put(n, n * (3 * n - 1) / 2);
		}
		return pentagonalNumbers.get(n);
	}

	/**
	 * Checks whether a number is pentagonal.
	 * 
	 * @param p
	 * @return
	 */
	private boolean isPentagonalNumber(int p) {
		boolean pentagonalNumber = false;
		// n(3n-1)/2 = P
		// 3n^2 - n - 2P = 0
		// n = (-b +- SQRT(b^2 - 4ac))/2a
		// n = (1 +- SQRT(1-4*3*-2P))/6
		// n = (1 +- SQRT(1+24P)) / 6
		double part = Math.sqrt(1 + 24 * p);
		double n1 = (1 + part) / 6;
		double n2 = (1 - part) / 6;

		if (n1 > 0 && n1 == Math.rint(n1)) {
			pentagonalNumber = true;
			if (!pentagonalNumbers.containsKey(n1)) {
				pentagonalNumbers.put((int) n1, p);
			}
		} else if (n2 > 0 && n2 == Math.rint(n2)) {
			pentagonalNumber = true;
			if (!pentagonalNumbers.containsKey(n2)) {
				pentagonalNumbers.put((int) n2, p);
			}
		}
		return pentagonalNumber;
	}
}
