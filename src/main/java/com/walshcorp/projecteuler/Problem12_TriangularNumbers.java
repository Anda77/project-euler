package com.walshcorp.projecteuler;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers: <br />
 * 1: 1<br />
 * 3: 1,3<br />
 * 6: 1,2,3,6<br />
 * 10: 1,2,5,10<br />
 * 15: 1,3,5,15<br />
 * 21: 1,3,7,21<br />
 * 28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 * 
 * @author martin
 * 
 */
public class Problem12_TriangularNumbers implements ProblemInterface {
	@Override
	public void solve() {
		int triNum = 0;
		int n = 1;
		boolean found = false;
		while (found == false) {
			triNum = triangularNumber(n);

			found = (numberOfDivisors(triNum) >= 500);
			n++;
		}
		System.out.println("Problem 12: " + triNum);
	}

	private static int numberOfDivisors(int n) {
		int limit = n;
		int numberOfDivisors = 0;

		for (int i = 1; i < limit; i++) {
			if (n % i == 0) {
				// Find divisors in factor
				limit = n / i;
				numberOfDivisors++;
			}
		}

		return numberOfDivisors * 2;
	}

	/**
	 * Returns the triangular number for the given index
	 * 
	 * @param n
	 * @return
	 */
	private static int triangularNumber(int n) {
		return (n * (n + 1)) / 2;
	}
}
